(function(window, angular, undefined) {

    angular.module('acn.bootstrap.carousel', ['acn/template/carousel/slide.html', 'acn/template/carousel/carousel.html'])

        .controller('AcnCarouselController', ['$rootScope', '$scope', '$element', '$interval', '$timeout', '$animate', function($rootScope, $scope, $element, $interval, $timeout, $animate) {
            var self = this,
                slides = self.slides = $scope.slides = [],
                SLIDE_DIRECTION = 'uib-slideDirection',
                currentIndex = $scope.active,
                currentInterval, isPlaying;


            var destroyed = false;
            $element.addClass('carousel');

            self.addSlide = function(slide, element) {
                slides.push({
                    slide: slide,
                    element: element
                });
                slides.sort(function(a, b) {
                    return +a.slide.index - +b.slide.index;
                });
                //if this is the first slide or the slide is set to active, select it 
                if (slide.index === $scope.active || slides.length === 1 && !angular.isNumber($scope.active)) {
                    if ($scope.$currentTransition) {
                        $scope.$currentTransition = null;
                    }

                    currentIndex = slide.index;
                    $scope.active = slide.index;
                    setActive(currentIndex);
                    self.select(slides[findSlideIndex(slide)]);
                    if (slides.length === 1) {
                        $scope.play();
                    }
                }
            };

            self.getCurrentIndex = function() {
                for (var i = 0; i < slides.length; i++) {
                    if (slides[i].slide.index === currentIndex) {
                        return i;
                    }
                }
            };

            self.next = $scope.next = function() {
                var newIndex = (self.getCurrentIndex() + 1) % slides.length;
                var aAction = 'Onclick Next Arrow + ';
                if (newIndex === 0 && $scope.noWrap()) {
                    $scope.pause();
                    return;
                }
                //$rootScope.$broadcast('evtAcnCarousel', {title: slides[newIndex].slide.$parent.slide.title + aAction});
                $rootScope.$broadcast('evtAcnCarousel', {
                    title: 'Headline - Chevron Right'
                });

                return self.select(slides[newIndex], 'next');
            };

            self.prev = $scope.prev = function() {
                var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;
                var aAction = 'Onclick Prev Arrow + ';
                if ($scope.noWrap() && newIndex === slides.length - 1) {
                    $scope.pause();
                    return;
                }
                //$rootScope.$broadcast('evtAcnCarousel', {title: slides[newIndex].slide.$parent.slide.title + aAction});
                $rootScope.$broadcast('evtAcnCarousel', {
                    title: 'Headline - Chevron Left'
                });


                return self.select(slides[newIndex], 'prev');
            };

            self.removeSlide = function(slide) {
                var index = findSlideIndex(slide);

                //get the index of the slide inside the carousel
                slides.splice(index, 1);
                if (slides.length > 0 && currentIndex === index) {
                    if (index >= slides.length) {
                        currentIndex = slides.length - 1;
                        $scope.active = currentIndex;
                        setActive(currentIndex);
                        self.select(slides[slides.length - 1]);
                    } else {
                        currentIndex = index;
                        $scope.active = currentIndex;
                        setActive(currentIndex);
                        self.select(slides[index]);
                    }
                } else if (currentIndex > index) {
                    currentIndex--;
                    $scope.active = currentIndex;
                }

                //clean the active value when no more slide
                if (slides.length === 0) {
                    currentIndex = null;
                    $scope.active = null;
                }
            };

            /* direction: "prev" or "next" */
            self.select = $scope.select = function(nextSlide, direction) {
                var nextIndex = findSlideIndex(nextSlide.slide);
                var newIndex = (self.getCurrentIndex() + 1) % slides.length;
                //Decide direction if it's not given
                if (direction === undefined) {
                    direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
                    // $rootScope.$broadcast('evtAcnCarousel', {title: 'Headline - Ellipsis'});

                }
                //Prevent this user-triggered transition from occurring if there is already one in progress
                if (nextSlide.slide.index !== currentIndex &&
                    !$scope.$currentTransition) {
                    goNext(nextSlide.slide, nextIndex, direction);

                }
                // $rootScope.$broadcast('evtAcnCarousel', {title: slides[newIndex].slide.$parent.slide.title});

            };

            /* Allow outside people to call indexOf on slides array */
            $scope.indexOfSlide = function(slide) {
                return +slide.slide.index;
            };

            $scope.currentHeadTitle = function() {

            };

            $scope.isActive = function(slide) {
                return $scope.active === slide.slide.index;
            };

            $scope.isPrevDisabled = function() {
                return $scope.active === 0 && $scope.noWrap();
            };

            $scope.isNextDisabled = function() {
                return $scope.active === slides.length - 1 && $scope.noWrap();
            };

            $scope.pause = function() {
                if (!$scope.noPause) {
                    isPlaying = false;
                    resetTimer();
                }
            };

            $scope.play = function() {
                if (!isPlaying) {
                    isPlaying = true;
                    restartTimer();
                }
            };

            function isHoverableDevice() {
                return window.matchMedia("(hover: hover) and (pointer: fine)").matches;
            }

			/* added the condition to make sure it apply to non touch devices only*/
            if (isHoverableDevice()) {
                $element.on('mouseenter', $scope.pause);
                $element.on('mouseleave', $scope.play);
                $element.on('focus', $scope.pause);
            }

            /* $element.on('mouseenter', $scope.pause);
             $element.on('mouseleave', $scope.play);
             $element.on('focus', $scope.pause);*/


            $scope.$on('$destroy', function() {
                destroyed = true;
                resetTimer();
            });

            $scope.$watch('noTransition', function(noTransition) {
                $animate.enabled($element, !noTransition);
            });

            $scope.$watch('interval', restartTimer);

            $scope.$watchCollection('slides', resetTransition);

            $scope.$watch('active', function(index) {
                if (angular.isNumber(index) && currentIndex !== index) {
                    for (var i = 0; i < slides.length; i++) {
                        if (slides[i].slide.index === index) {
                            index = i;
                            break;
                        }
                    }

                    var slide = slides[index];
                    if (slide) {
                        setActive(index);
                        self.select(slides[index]);
                        currentIndex = index;
                    }
                }
            });

            function getSlideByIndex(index) {
                for (var i = 0, l = slides.length; i < l; ++i) {
                    if (slides[i].index === index) {
                        return slides[i];
                    }
                }
            }

            function setActive(index) {
                for (var i = 0; i < slides.length; i++) {
                    slides[i].slide.active = i === index;
                }
            }

            function goNext(slide, index, direction) {
                if (destroyed) {
                    return;
                }

                angular.extend(slide, {
                    direction: direction
                });
                angular.extend(slides[currentIndex].slide || {}, {
                    direction: direction
                });
                if ($animate.enabled($element) && !$scope.$currentTransition &&
                    slides[index].element && self.slides.length > 1) {
                    slides[index].element.data(SLIDE_DIRECTION, slide.direction);
                    var currentIdx = self.getCurrentIndex();

                    if (angular.isNumber(currentIdx) && slides[currentIdx].element) {
                        slides[currentIdx].element.data(SLIDE_DIRECTION, slide.direction);
                    }

                    $scope.$currentTransition = true;
                    $animate.on('addClass', slides[index].element, function(element, phase) {
                        if (phase === 'close') {
                            $scope.$currentTransition = null;
                            $animate.off('addClass', element);
                        }
                    });
                }

                $scope.active = slide.index;
                currentIndex = slide.index;
                setActive(index);

                //every time you change slides, reset the timer
                restartTimer();
            }

            function findSlideIndex(slide) {
                for (var i = 0; i < slides.length; i++) {
                    if (slides[i].slide === slide) {
                        return i;
                    }
                }
            }

            function resetTimer() {
                if (currentInterval) {
                    $interval.cancel(currentInterval);
                    currentInterval = null;
                }
            }

            function resetTransition(slides) {
                if (!slides.length) {
                    $scope.$currentTransition = null;
                }
            }

            function restartTimer() {
                resetTimer();
                var interval = +$scope.interval;
                if (!isNaN(interval) && interval > 0) {
                    currentInterval = $interval(timerFn, interval);
                }
            }

            function timerFn() {
                var interval = +$scope.interval;
                //isPlaying && !isNaN(interval) && interval > 0 && slides.length
                if (!isNaN(interval) && interval > 0 && slides.length) {
                    $scope.next();
                } else {
                    $scope.pause();
                }
            }
        }])


        .directive('acnCarousel', function() {
            return {
                transclude: true,
                controller: 'AcnCarouselController',
                controllerAs: 'carousel',
                restrict: 'A',
                templateUrl: function(element, attrs) {
                    return attrs.templateUrl || 'acn/template/carousel/carousel.html';
                },
                scope: {
                    active: '=',
                    interval: '=',
                    noTransition: '=',
                    noPause: '=',
                    noWrap: '&'
                }
            };

        })


        .directive('acnSlide', ['$animate', function($animate) {
            return {
                require: '^acnCarousel',
                restrict: 'A',
                transclude: true,
                templateUrl: function(element, attrs) {
                    return attrs.templateUrl || 'acn/template/carousel/slide.html';
                },
                scope: {
                    actual: '=?',
                    index: '=?'
                },
                link: function(scope, element, attrs, carouselCtrl) {
                    element.addClass('item');
                    carouselCtrl.addSlide(scope, element);
                    //when the scope is destroyed then remove the slide from the current slides array
                    scope.$on('$destroy', function() {
                        carouselCtrl.removeSlide(scope);
                    });

                    scope.$watch('active', function(active) {
                        $animate[active ? 'addClass' : 'removeClass'](element, 'active');
                    });
                }
            };
        }])

        .animation('.item', ['$animateCss',
            function($animateCss) {
                var SLIDE_DIRECTION = 'uib-slideDirection';

                function removeClass(element, className, callback) {
                    element.removeClass(className);
                    if (callback) {
                        callback();
                    }
                }

                return {
                    beforeAddClass: function(element, className, done) {
                        if (className === 'active') {
                            var stopped = false;
                            var direction = element.data(SLIDE_DIRECTION);
                            var directionClass = direction === 'next' ? 'left' : 'right';
                            var removeClassFn = removeClass.bind(this, element,
                                directionClass + ' ' + direction, done);
                            element.addClass(direction);

                            $animateCss(element, {
                                    addClass: directionClass
                                })
                                .start()
                                .done(removeClassFn);

                            return function() {
                                stopped = true;
                            };
                        }
                        done();
                    },
                    beforeRemoveClass: function(element, className, done) {
                        if (className === 'active') {
                            var stopped = false;
                            var direction = element.data(SLIDE_DIRECTION);
                            var directionClass = direction === 'next' ? 'left' : 'right';
                            var removeClassFn = removeClass.bind(this, element, directionClass, done);

                            $animateCss(element, {
                                    addClass: directionClass
                                })
                                .start()
                                .done(removeClassFn);

                            return function() {
                                stopped = true;
                            };
                        }
                        done();
                    }
                };
            }
        ]);

    angular.module("acn/template/carousel/carousel.html", []).run(["$templateCache", function($templateCache) {
        $templateCache.put("acn/template/carousel/carousel.html",
            "<div class=\"carousel-indicatorss\" ng-show=\"slides.length > 1\">\n" +
            "  <button tabindex=\"0\" ng-repeat=\"slide in slides | orderBy:indexOfSlide track by $index\" ng-class=\"{ active: isActive(slide) }\" ng-click=\"select(slide)\">\n" +
            "    <span class=\"sr-only\">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if=\"isActive(slide)\">, currently active</span></span>\n" +
            "  </button>\n" +
            "</div>\n" +
            "<div class=\"carousel-inner\" ng-transclude></div>\n" +
            "<button ng-disabled=\"isPrevDisabled()\" style=\"border:none;\" role=\"button\" href=\"#\" class=\"left carousel-control\" ng-click=\"prev()\" ng-class=\"{ disabled: isPrevDisabled() }\" ng-show=\"slides.length > 1\">\n" +
            "  <span aria-hidden=\"true\" class=\"material-symbols-outlined chevron-left\"> chevron_left </span>\n" +
            "  <span class=\"sr-only\">previous</span>\n" +
            "</button>\n" +
            "<button ng-disabled=\"isNextDisabled()\" style=\"border:none;\" role=\"button\" href=\"#\" class=\"right carousel-control\" ng-blur=\"play()\" ng-click=\"next()\" ng-class=\"{ disabled: isNextDisabled() }\" ng-show=\"slides.length > 1\">\n" +
            "  <span aria-hidden=\"true\" class=\"material-symbols-outlined chevron-right\"> chevron_right </span>\n" +
            "  <span class=\"sr-only\">next</span>\n" +
            "</button>\n" +

            "");
    }]);


    angular.module("acn/template/carousel/slide.html", []).run(["$templateCache", function($templateCache) {
        $templateCache.put("acn/template/carousel/slide.html",
            "<div class=\"text-center\" ng-transclude></div>\n" +
            "");
    }]);
})(window, angular);